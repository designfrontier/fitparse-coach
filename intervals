from fitparse import FitFile
import pandas as pd
import numpy as np
from datetime import timedelta
import sys
from config import FTP, HRMAX

def load_fit_data(filepath):
    fitfile = FitFile(filepath)
    records = []
    for record in fitfile.get_messages("record"):
        vals = record.get_values()
        records.append({
            'timestamp': vals.get('timestamp'),
            'power': vals.get('power'),
            'heart_rate': vals.get('heart_rate'),
            'cadence': vals.get('cadence'),
            'torque_effectiveness': vals.get('torque_effectiveness')
        })
    return pd.DataFrame(records)

def load_lap_data(filepath):
    fitfile = FitFile(filepath)
    laps = []
    for lap in fitfile.get_messages("lap"):
        vals = lap.get_values()
        laps.append({
            'start_time': vals.get('start_time'),
            'total_elapsed_time': vals.get('total_elapsed_time'),
            'total_timer_time': vals.get('total_timer_time')
        })
    return laps

def get_lap_intervals(df, laps):
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.set_index('timestamp').dropna(subset=['power'])
    df['power'] = df['power'].astype(float)
    df['heart_rate'] = df['heart_rate'].astype(float)
    df['cadence'] = df['cadence'].astype(float)
    df['torque_effectiveness'] = df['torque_effectiveness'].astype(float)

    intervals = []
    for lap in laps:
        start_time = pd.to_datetime(lap['start_time'])
        end_time = start_time + timedelta(seconds=lap['total_elapsed_time'])

        # Filter records within this lap's time range
        lap_data = df[(df.index >= start_time) & (df.index <= end_time)]

        if not lap_data.empty:
            intervals.append(lap_data)

    return intervals

def summarize_interval(interval_df):
    duration = (interval_df.index[-1] - interval_df.index[0]).total_seconds()
    avg_power = interval_df['power'].mean()
    np_power = (interval_df['power'] ** 4).mean() ** 0.25
    avg_hr = interval_df['heart_rate'].mean()
    hr_drift = ((interval_df['heart_rate'].iloc[len(interval_df)//2:].mean() -
                 interval_df['heart_rate'].iloc[:len(interval_df)//2].mean()) /
                 interval_df['heart_rate'].iloc[:len(interval_df)//2].mean()) * 100
    avg_cad = interval_df['cadence'].mean()
    avg_te = interval_df['torque_effectiveness'].mean()
    return {
        'duration_sec': round(duration, 1),
        'avg_power': round(avg_power, 1),
        'np_power': round(np_power, 1),
        'avg_hr': round(avg_hr, 1),
        'hr_drift_pct': round(hr_drift, 2),
        'avg_cadence': round(avg_cad, 1),
        'avg_torque_eff': round(avg_te, 1)
    }

def main():
    df = load_fit_data(sys.argv[1])
    laps = load_lap_data(sys.argv[1])
    intervals = get_lap_intervals(df, laps)

    print(f"\n--- Detected Laps ({len(intervals)} total) ---")
    for i, interval in enumerate(intervals, 1):
        summary = summarize_interval(interval)
        print(f"Lap {i}: {summary}")

if __name__ == "__main__":
    main()